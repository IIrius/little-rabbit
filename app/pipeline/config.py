"""Workspace pipeline configuration management."""
from __future__ import annotations

import json
import logging
from functools import lru_cache
from typing import Dict, Iterable, Iterator, List

from pydantic import BaseModel, Field, validator

from app.config import get_settings

logger = logging.getLogger("app.pipeline.config")


class RawNewsItem(BaseModel):
    """Raw news payload definition for pipeline ingestion."""

    title: str
    body: str
    author: str | None = None

    @validator("title", "body", pre=True, allow_reuse=True)
    def _ensure_text(cls, value: object) -> str:
        if value is None:
            raise ValueError("news payload fields cannot be None")
        return str(value)


class WorkspacePipelineConfig(BaseModel):
    """Settings that control pipeline behaviour for a workspace."""

    workspace: str
    enabled: bool = True
    schedule_seconds: int = Field(300, ge=1)
    retry_attempts: int = Field(3, ge=0)
    retry_delay_seconds: int = Field(30, ge=0)
    sources: List[RawNewsItem] = Field(default_factory=list)
    tags: List[str] = Field(default_factory=list)

    @validator("workspace", allow_reuse=True)
    def _workspace_not_blank(cls, value: str) -> str:
        value = value.strip()
        if not value:
            raise ValueError("workspace identifier cannot be blank")
        return value

    @validator("tags", pre=True, allow_reuse=True)
    def _ensure_tags(cls, value: object) -> List[str]:
        if value is None:
            return []
        if isinstance(value, str):
            return [value]
        if isinstance(value, Iterable):
            return [str(item) for item in value]
        return []


DEFAULT_PIPELINE_CONFIG: Dict[str, dict[str, object]] = {
    "dev": {
        "workspace": "dev",
        "enabled": True,
        "schedule_seconds": 300,
        "retry_attempts": 3,
        "retry_delay_seconds": 10,
        "tags": ["dev", "sample"],
        "sources": [
            {
                "title": "Celery orchestrates the dev workspace pipeline",
                "body": (
                    "Sample article generated by the development workspace pipeline. "
                    "Used to validate end-to-end orchestration, scheduling, metrics, "
                    "and publication flows."
                ),
                "author": "automation-bot",
            }
        ],
    }
}


def _iter_external_configs(data: object) -> Iterator[dict[str, object]]:
    if isinstance(data, dict):
        for value in data.values():
            if isinstance(value, dict):
                yield value
    elif isinstance(data, list):
        for entry in data:
            if isinstance(entry, dict):
                yield entry
    else:
        raise TypeError("workspace pipeline configuration must be a mapping or list")


@lru_cache(maxsize=1)
def load_workspace_configs() -> Dict[str, WorkspacePipelineConfig]:
    """Load and cache workspace pipeline configurations."""

    base_configs = {
        name: WorkspacePipelineConfig(**payload)
        for name, payload in DEFAULT_PIPELINE_CONFIG.items()
    }

    settings = get_settings()
    overrides = settings.pipeline_config_json
    if overrides:
        try:
            raw_config = json.loads(overrides)
        except json.JSONDecodeError as exc:  # pragma: no cover - defensive logging
            logger.warning(
                "Failed to parse WORKSPACE_PIPELINES_JSON override: %s", exc
            )
        else:
            try:
                entries = list(_iter_external_configs(raw_config))
            except TypeError as exc:  # pragma: no cover - defensive logging
                logger.warning(
                    "Ignoring workspace pipeline overrides due to format error: %s",
                    exc,
                )
            else:
                for entry in entries:
                    try:
                        config = WorkspacePipelineConfig(**entry)
                    except Exception as exc:  # pragma: no cover - defensive logging
                        logger.warning(
                            "Skipping invalid workspace pipeline override: %s", exc
                        )
                        continue
                    base_configs[config.workspace] = config

    return base_configs


def get_workspace_config(workspace: str) -> WorkspacePipelineConfig:
    """Return the configuration for the requested workspace."""

    configs = load_workspace_configs()
    try:
        return configs[workspace]
    except KeyError as exc:
        raise KeyError(f"Unknown workspace '{workspace}'") from exc


def list_workspace_configs() -> List[WorkspacePipelineConfig]:
    """Return all configured workspace pipeline settings."""

    return list(load_workspace_configs().values())


__all__ = [
    "RawNewsItem",
    "WorkspacePipelineConfig",
    "get_workspace_config",
    "list_workspace_configs",
    "load_workspace_configs",
]
